# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Float')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Float')
    _Float = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Float', [dirname(__file__)])
        except ImportError:
            import _Float
            return _Float
        try:
            _mod = imp.load_module('_Float', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Float = swig_import_helper()
    del swig_import_helper
else:
    import _Float
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Float.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        return _Float.SwigPyIterator_value(self)

    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Float.SwigPyIterator_incr(self, n)

    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        return _Float.SwigPyIterator_decr(self, n)

    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        return _Float.SwigPyIterator_distance(self, x)

    def equal(self, x: 'SwigPyIterator') -> "bool":
        return _Float.SwigPyIterator_equal(self, x)

    def copy(self) -> "swig::SwigPyIterator *":
        return _Float.SwigPyIterator_copy(self)

    def next(self) -> "PyObject *":
        return _Float.SwigPyIterator_next(self)

    def __next__(self) -> "PyObject *":
        return _Float.SwigPyIterator___next__(self)

    def previous(self) -> "PyObject *":
        return _Float.SwigPyIterator_previous(self)

    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Float.SwigPyIterator_advance(self, n)

    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        return _Float.SwigPyIterator___eq__(self, x)

    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        return _Float.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Float.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        return _Float.SwigPyIterator___isub__(self, n)

    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        return _Float.SwigPyIterator___add__(self, n)

    def __sub__(self, *args) -> "ptrdiff_t":
        return _Float.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _Float.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class _string_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, _string_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, _string_list, name)
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        return _Float._string_list_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        return _Float._string_list___nonzero__(self)

    def __bool__(self) -> "bool":
        return _Float._string_list___bool__(self)

    def __len__(self) -> "std::vector< std::string >::size_type":
        return _Float._string_list___len__(self)

    def __getslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "std::vector< std::string,std::allocator< std::string > > *":
        return _Float._string_list___getslice__(self, i, j)

    def __setslice__(self, *args) -> "void":
        return _Float._string_list___setslice__(self, *args)

    def __delslice__(self, i: 'std::vector< std::string >::difference_type', j: 'std::vector< std::string >::difference_type') -> "void":
        return _Float._string_list___delslice__(self, i, j)

    def __delitem__(self, *args) -> "void":
        return _Float._string_list___delitem__(self, *args)

    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &":
        return _Float._string_list___getitem__(self, *args)

    def __setitem__(self, *args) -> "void":
        return _Float._string_list___setitem__(self, *args)

    def pop(self) -> "std::vector< std::string >::value_type":
        return _Float._string_list_pop(self)

    def append(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _Float._string_list_append(self, x)

    def empty(self) -> "bool":
        return _Float._string_list_empty(self)

    def size(self) -> "std::vector< std::string >::size_type":
        return _Float._string_list_size(self)

    def swap(self, v: '_string_list') -> "void":
        return _Float._string_list_swap(self, v)

    def begin(self) -> "std::vector< std::string >::iterator":
        return _Float._string_list_begin(self)

    def end(self) -> "std::vector< std::string >::iterator":
        return _Float._string_list_end(self)

    def rbegin(self) -> "std::vector< std::string >::reverse_iterator":
        return _Float._string_list_rbegin(self)

    def rend(self) -> "std::vector< std::string >::reverse_iterator":
        return _Float._string_list_rend(self)

    def clear(self) -> "void":
        return _Float._string_list_clear(self)

    def get_allocator(self) -> "std::vector< std::string >::allocator_type":
        return _Float._string_list_get_allocator(self)

    def pop_back(self) -> "void":
        return _Float._string_list_pop_back(self)

    def erase(self, *args) -> "std::vector< std::string >::iterator":
        return _Float._string_list_erase(self, *args)

    def __init__(self, *args):
        this = _Float.new__string_list(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::string >::value_type const &') -> "void":
        return _Float._string_list_push_back(self, x)

    def front(self) -> "std::vector< std::string >::value_type const &":
        return _Float._string_list_front(self)

    def back(self) -> "std::vector< std::string >::value_type const &":
        return _Float._string_list_back(self)

    def assign(self, n: 'std::vector< std::string >::size_type', x: 'std::vector< std::string >::value_type const &') -> "void":
        return _Float._string_list_assign(self, n, x)

    def resize(self, *args) -> "void":
        return _Float._string_list_resize(self, *args)

    def insert(self, *args) -> "void":
        return _Float._string_list_insert(self, *args)

    def reserve(self, n: 'std::vector< std::string >::size_type') -> "void":
        return _Float._string_list_reserve(self, n)

    def capacity(self) -> "std::vector< std::string >::size_type":
        return _Float._string_list_capacity(self)
    __swig_destroy__ = _Float.delete__string_list
    __del__ = lambda self: None
_string_list_swigregister = _Float._string_list_swigregister
_string_list_swigregister(_string_list)

class Float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Float, name)
    __repr__ = _swig_repr

    def __init__(self, number: 'float'):
        this = _Float.new_Float(number)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self) -> "void":
        return _Float.Float_value(self)

    def __hash__(self, number: 'Float') -> "size_t":
        return _Float.Float___hash__(self, number)
    __swig_destroy__ = _Float.delete_Float
    __del__ = lambda self: None
Float_swigregister = _Float.Float_swigregister
Float_swigregister(Float)

def Addition(number: 'Float', number2: 'Float') -> "Float":
    return _Float.Addition(number, number2)
Addition = _Float.Addition

def Subtraction(number: 'Float', number2: 'Float') -> "Float":
    return _Float.Subtraction(number, number2)
Subtraction = _Float.Subtraction

def Multiply(number: 'Float', number2: 'Float') -> "Float":
    return _Float.Multiply(number, number2)
Multiply = _Float.Multiply

def Division(number: 'Float', number2: 'Float') -> "Float":
    return _Float.Division(number, number2)
Division = _Float.Division

def Output(out: 'ostream &', num: 'Float') -> "ostream &":
    return _Float.Output(out, num)
Output = _Float.Output

# This file is compatible with both classic and new-style classes.


